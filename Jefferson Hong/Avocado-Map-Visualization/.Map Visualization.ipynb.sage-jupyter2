{"backend_state":"init","connection_file":"/projects/79f0d46f-11ed-4ebe-8d2f-dc96b3f45fdf/.local/share/jupyter/runtime/kernel-3bdd29b1-e4af-4a17-b6f0-9add7fb1f051.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"4ae687","input":"import pandas as pd\nimport plotly.express as px\nimport statsmodels\nimport city_to_state\nimport us_state_abbrev\nfrom enum import Enum","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"eae9f3","input":"def get_from_all(map_typ, avo_typ):\n    chosen_df = df.copy()\n\n    from_all = chosen_df[0:0]\n    for x in range(0, len(chosen_df[map_typ.value].unique())):\n        from_all = (pd.concat(\n            [from_all,\n             get_from(map_typ, chosen_df[map_typ.value].unique()[x], avo_typ)],\n            ignore_index=True))\n    return from_all","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"54431d","input":"def get_from(map_typ, val, avo_typ):\n    vals_df = df.loc[((df[map_typ.value] == val) & (df['type'] == avo_typ.value))]\n    temp = vals_df.groupby(vals_df.state)['average_price'].mean()\n\n    res = pd.DataFrame(temp.index.values, columns=['state'])\n\n    res['code'] = res['state'].apply(to_abbrev)\n    res['average_price'] = temp.values\n    res[map_typ.value] = val\n    res = res.drop(res[res['state'] == 'NaC'].index)\n\n    return res","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"457b40","input":"def to_abbrev(state):\n    if state in us_state_abbrev_dict:\n        return us_state_abbrev_dict[state]\n    else:\n        return 'NaS'","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"6e2779","input":"def to_state(city):\n    if city in city_to_state_dict:\n        return city_to_state_dict[city]\n\n    city = city.split(\"/\")[0]\n    if city in city_to_state_dict:\n        return city_to_state_dict[city]\n    if city in us_state_abbrev_dict:\n        return city\n    elif city == 'Hartford':\n        return city_to_state_dict['West Hartford']\n    elif city == 'Roanoke':\n        return city_to_state_dict['Roanoke Rapids']\n    else:\n        return 'NaC'","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"e8afb0","input":"def to_readable_date(date):\n    date = date // 100\n    year = date // 100\n    month = date % 100\n    return year + (month / 100)","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"555b0e","input":"def show_scatter():\n    us_df = df.loc[(df['geography'] == 'Total U.S.'), :].copy(deep=False)\n    us_df['date'] = pd.to_datetime(us_df['date'])\n    us_fig = px.scatter(\n        us_df,\n        x='date',\n        y='total_volume',\n        color='type',\n        size=us_df['average_price'].values,\n        title='Total Volume of Avocados Sold in the U.S.',\n        trendline=\"ols\",\n    )\n    us_fig.show()","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"ad8b24","input":"def main():\n    global df\n    df = set_up()\n\n    show_map(MapType.YEARLY, AvoType.ORGANIC)\n    show_map(MapType.YEARLY, AvoType.CONVENTIONAL)\n    show_map(MapType.MONTHLY, AvoType.ORGANIC)\n    show_map(MapType.MONTHLY, AvoType.CONVENTIONAL)\n\n    show_scatter()","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"adb726","input":"main()","output":{"0":{"data":{"iframe":"bf2b4e1fe94a97d28c7e5c4396c24ea8c0d02a79"},"exec_count":17,"output_type":"execute_result"},"1":{"data":{"iframe":"64c11b85a67324cfa4d5ceff8360cc845f500dc8"},"exec_count":17,"output_type":"execute_result"},"2":{"data":{"iframe":"cc21f787e8f76a2068a4b06463e4fe9c4611092e"},"exec_count":17,"output_type":"execute_result"},"3":{"data":{"iframe":"342fa9e41b106cf7729c65d3726fed9979e9cbea"},"exec_count":17,"output_type":"execute_result"},"4":{"data":{"iframe":"e583cde3ebbe66092e3afe2db659c4b0cd723483"},"exec_count":17,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"07ad7c","input":"class AvoType(Enum):\n    ORGANIC = 'organic'\n    CONVENTIONAL = 'conventional'","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"7c1120","input":"class MapType(Enum):\n    MONTHLY = 'year_n_month'\n    YEARLY = 'year'","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"379825","input":"city_to_state_dict = city_to_state.city_to_state_dict\nus_state_abbrev_dict = us_state_abbrev.us_state_to_abbrev_dict","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"c1c079","input":"regions = {\n    'West': ['Utah', 'New Mexico'],\n    'Plains': ['Oklahoma', 'Kansas', 'Nebraska', 'South Dakota', 'Wyoming', 'Montana', 'North Dakota'],\n    'Southeast': ['West Virginia', 'Virginia', 'Mississippi', 'Alabama'],\n    'Northeast': ['New Jersey', 'Rhode Island', 'Vermont', 'New Hampshire', 'Maine', 'Delaware'],\n    'Northern New England': ['New Jersey'],\n    'Great Lakes': ['Wisconsin', 'Iowa']\n}","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"51a33b","input":"df = pd.DataFrame()","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"b776f5","input":"def set_up():\n    avocado_df = pd.read_csv('avocados.csv')\n\n    # float year and month column (year.month)\n    avocado_df['year_n_month'] = avocado_df['date'].replace('-', '', regex=True)\n    avocado_df['year_n_month'] = pd.to_numeric(avocado_df['year_n_month'])\n    avocado_df['year_n_month'] = avocado_df['year_n_month'].apply(to_readable_date)\n\n    # state column from city\n    avocado_df['state'] = avocado_df['geography'].apply(to_state)\n    # get states not included from regions (plains, northern new england, great lakes)\n    avocado_df = pd.concat([avocado_df, get_all_non_included_states_from_regions(avocado_df)], ignore_index=True)\n    # code column from state names (for map visualization)\n    avocado_df['code'] = avocado_df['state'].apply(to_abbrev)\n\n    # print(avocado_df.loc[(avocado_df['state'] == 'NaC')].geography.unique())\n    # print(avocado_df.loc[(avocado_df['code'] == 'NaS')].geography.unique())\n\n    return avocado_df","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"a4e9b6","input":"def get_all_non_included_states_from_regions(avocado_df):\n    total_df = avocado_df[0:0]\n    for region in regions.keys():\n        curr_df = avocado_df.loc[(avocado_df['geography'] == region)]\n        for x in range(0, len(regions[region])):\n            temp = curr_df.assign(state=regions[region][x])\n            total_df = pd.concat([total_df, temp], ignore_index=True)\n    return total_df","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"476a96","input":"def show_map(map_type, avo_typ):\n    show_df = get_from_all(map_type, avo_typ)\n\n    color_scale = 'deep'\n    if avo_typ == AvoType.CONVENTIONAL:\n        color_scale = 'amp'\n\n    max_val = show_df.loc[(df['type'] == avo_typ.value), :]['average_price'].max()\n    min_val = show_df.loc[(df['type'] == avo_typ.value), :]['average_price'].min()\n\n    fig = px.choropleth(\n        show_df,\n        locations='code',\n        locationmode='USA-states',\n        hover_name='state',\n        color='average_price',\n        color_continuous_scale=color_scale,\n        range_color=(min_val, max_val),\n        animation_frame=map_type.value,\n        scope='usa',\n        title=f'Prices of {avo_typ.name} Avocados across the U.S. ({map_type.name})',\n        labels={'average_price': 'average price', 'year_n_month': 'date'}\n    )\n    fig.show()","pos":8,"type":"cell"}
{"id":0,"time":1655322714138,"type":"user"}
{"last_load":1655322713301,"type":"file"}