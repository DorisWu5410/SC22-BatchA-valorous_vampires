{"backend_state":"running","connection_file":"/projects/79f0d46f-11ed-4ebe-8d2f-dc96b3f45fdf/.local/share/jupyter/runtime/kernel-aebb4069-eba7-483e-b534-b31a907121ce.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1654971862774,"exec_count":1,"id":"4ae687","input":"import pandas as pd\nimport plotly.express as px\nimport statsmodels\nimport city_to_state\nimport us_state_abbrev\nfrom enum import Enum","kernel":"python3-ubuntu","no_halt":true,"pos":0,"start":1654971862490,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862793,"exec_count":3,"id":"379825","input":"city_to_state_dict = city_to_state.city_to_state_dict\nus_state_abbrev_dict = us_state_abbrev.us_state_to_abbrev_dict","kernel":"python3-ubuntu","no_halt":true,"pos":1,"start":1654971862788,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862804,"exec_count":4,"id":"c1c079","input":"regions = {\n    'West': ['Utah', 'New Mexico'],\n    'Plains': ['Oklahoma', 'Kansas', 'Nebraska', 'South Dakota', 'Wyoming', 'Montana', 'North Dakota'],\n    'Southeast': ['West Virginia', 'Virginia', 'Mississippi', 'Alabama'],\n    'Northeast': ['New Jersey', 'Rhode Island', 'Vermont', 'New Hampshire', 'Maine', 'Delaware'],\n    'Northern New England': ['New Jersey'],\n    'Great Lakes': ['Wisconsin', 'Iowa']\n}","kernel":"python3-ubuntu","no_halt":true,"pos":2,"start":1654971862796,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862822,"exec_count":5,"id":"b776f5","input":"def set_up():\n    avocado_df = pd.read_csv('avocados.csv')\n    # avocado_df['date'] = pd.to_datetime(avocado_df['date'])\n    avocado_df['state'] = avocado_df['geography'].apply(to_state)\n    avocado_df = pd.concat([avocado_df, get_from_all(avocado_df)], ignore_index=True)\n    avocado_df['code'] = avocado_df['state'].apply(to_abbrev)\n    avocado_df['total_volume'] = pd.to_numeric(avocado_df['total_volume'])\n    avocado_df['average_price'] = pd.to_numeric(avocado_df['average_price'])\n    # print(avocado_df.loc[(avocado_df['state'] == 'NaC')].geography.unique())\n    # print(avocado_df.loc[(avocado_df['code'] == 'NaS')].geography.unique())\n\n    return avocado_df","kernel":"python3-ubuntu","no_halt":true,"pos":3,"start":1654971862812,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862836,"exec_count":6,"id":"820131","input":"def show_yearly_map(df, typ):\n    show_df = get_from_all_years(df, typ)\n\n    color_scale = 'Reds'\n    if typ == AvoType.CONVENTIONAL:\n        color_scale = 'Blues'\n\n    fig = px.choropleth(\n        show_df,\n        locations='code',\n        locationmode=\"USA-states\",\n        color='average_price',\n        hover_name='state',\n        animation_frame='year',\n        scope=\"usa\",\n        color_continuous_scale=color_scale,\n        title=f'Prices of {typ.name} Avocados across the U.S. (Yearly)',\n    )\n    fig.show()","kernel":"python3-ubuntu","no_halt":true,"pos":4,"start":1654971862833,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862853,"exec_count":7,"id":"5611d5","input":"def show_monthly_map(df, typ):\n    show_df = get_from_all_dates(df, typ)\n    show_df['date'] = show_df['date'].replace('-', '', regex=True)\n    show_df['date'] = pd.to_numeric(show_df['date'])\n    show_df.date = show_df.date.apply(to_readable_date)\n\n    color_scale = 'Reds'\n    if typ == AvoType.CONVENTIONAL:\n        color_scale = 'Blues'\n\n    fig = px.choropleth(\n        show_df,\n        locations='code',\n        locationmode=\"USA-states\",\n        color='average_price',\n        hover_name='state',\n        animation_frame='date',\n        scope='usa',\n        color_continuous_scale=color_scale,\n        title=f'Prices of {typ.name} Avocados across the U.S. (Monthly)',\n    )\n    fig.show()","kernel":"python3-ubuntu","no_halt":true,"pos":5,"start":1654971862840,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862863,"exec_count":8,"id":"8f13e4","input":"def get_from_all_years(df, typ):\n    from_all = get_from_year(df, 2015, typ)\n    for x in range(2016, 2021):\n        from_all = (pd.concat([from_all, get_from_year(df, x, typ)], ignore_index=True))\n    return from_all","kernel":"python3-ubuntu","no_halt":true,"pos":6,"start":1654971862857,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862874,"exec_count":9,"id":"8ee5d6","input":"def get_from_year(df, year, typ):\n    year_df = df.loc[((df['year'] == year) & (df['type'] == typ.value))]\n    temp = year_df.groupby(year_df.state)['average_price'].mean()\n\n    res = pd.DataFrame(temp.index.values, columns=['state'])\n\n    res['code'] = res['state'].apply(to_abbrev)\n    res['average_price'] = temp.values\n    res['year'] = year\n\n    return res","kernel":"python3-ubuntu","no_halt":true,"pos":7,"start":1654971862866,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862889,"exec_count":10,"id":"54431d","input":"def get_from_all(df):\n    total_df = pd.DataFrame(columns=df.columns)\n\n    for region in regions.keys():\n        curr_df = df.loc[(df['geography'] == region)]\n        for x in range(0, len(regions[region])):\n            temp = curr_df.assign(state=regions[region][x])\n            total_df = pd.concat([total_df, temp], ignore_index=True)\n\n    return total_df","kernel":"python3-ubuntu","no_halt":true,"pos":8,"start":1654971862877,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862901,"exec_count":11,"id":"b96565","input":"def get_from_all_dates(df, typ):\n    from_all = get_from_date(df, df.date.unique()[0], typ)\n    for x in range(1, len(df.date.unique())):\n        from_all = (pd.concat([from_all, get_from_date(df, df.date.unique()[x], typ)], ignore_index=True))\n    return from_all","kernel":"python3-ubuntu","no_halt":true,"pos":9,"start":1654971862893,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862912,"exec_count":12,"id":"24296d","input":"def get_from_date(df, date, typ):\n    date_df = df.loc[((df['date'] == date) & (df['type'] == typ.value))]\n    temp = date_df.groupby(date_df.state)['average_price'].mean()\n\n    res = pd.DataFrame(temp.index.values, columns=['state'])\n\n    res['code'] = res['state'].apply(to_abbrev)\n    res['average_price'] = temp.values\n    res['date'] = date\n\n    return res","kernel":"python3-ubuntu","no_halt":true,"pos":10,"start":1654971862904,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862921,"exec_count":13,"id":"457b40","input":"def to_abbrev(state):\n    if state in us_state_abbrev_dict:\n        return us_state_abbrev_dict[state]\n    else:\n        return 'NaS'","kernel":"python3-ubuntu","no_halt":true,"pos":11,"start":1654971862915,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862930,"exec_count":14,"id":"6e2779","input":"def to_state(city):\n    if city in city_to_state_dict:\n        return city_to_state_dict[city]\n\n    city = city.split(\"/\")[0]\n    if city in city_to_state_dict:\n        return city_to_state_dict[city]\n    if city in us_state_abbrev_dict:\n        return city\n    elif city == 'Hartford':\n        return city_to_state_dict['West Hartford']\n    elif city == 'Roanoke':\n        return city_to_state_dict['Roanoke Rapids']\n    else:\n        return 'NaC'","kernel":"python3-ubuntu","no_halt":true,"pos":12,"start":1654971862924,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862941,"exec_count":15,"id":"17f943","input":"def to_state(city):\n    if city in city_to_state_dict:\n        return city_to_state_dict[city]\n\n    city = city.split(\"/\")[0]\n    if city in city_to_state_dict:\n        return city_to_state_dict[city]\n    if city in us_state_abbrev_dict:\n        return city\n    elif city == 'Hartford':\n        return city_to_state_dict['West Hartford']\n    elif city == 'Roanoke':\n        return city_to_state_dict['Roanoke Rapids']\n    else:\n        return 'NaC'","kernel":"python3-ubuntu","no_halt":true,"pos":13,"start":1654971862934,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862955,"exec_count":16,"id":"e8afb0","input":"def to_readable_date(date):\n    date = date // 100\n    year = date // 100\n    month = date % 100\n    return year + (month / 100)","kernel":"python3-ubuntu","no_halt":true,"pos":14,"start":1654971862951,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971862970,"exec_count":17,"id":"ad8b24","input":"def main():\n    df = set_up()\n    show_yearly_map(df, AvoType.ORGANIC)\n    show_yearly_map(df, AvoType.CONVENTIONAL)\n    show_monthly_map(df, AvoType.ORGANIC)\n    show_monthly_map(df, AvoType.CONVENTIONAL)\n\n    us_df = df.loc[(df['geography'] == 'Total U.S.')].copy(deep=False)\n    us_df['date'] = pd.to_datetime(us_df['date'])\n    us_fig = px.scatter(\n        us_df,\n        x='date',\n        y='total_volume',\n        color='type',\n        size=us_df['average_price'].values,\n        title='Total Volume of Avocados Sold in the U.S.',\n        trendline=\"ols\"\n    )\n    us_fig.show()","kernel":"python3-ubuntu","no_halt":true,"pos":15,"start":1654971862967,"state":"done","type":"cell"}
{"cell_type":"code","end":1654971871413,"exec_count":18,"id":"adb726","input":"main()","kernel":"python3-ubuntu","no_halt":true,"output":{"0":{"data":{"iframe":"aa0603c2bc27a0c9668268695f1f60dd12e3887e"}},"1":{"data":{"iframe":"04657fd2ca58476ecaef659907a1cb50f70b99bf"}},"2":{"data":{"iframe":"d7fa8e4d550fa2fc2071dd8560d1cb1e5d4f95b6"}},"3":{"data":{"iframe":"a31e9af3636543601e015d5245d77ba151564b2d"}},"4":{"data":{"iframe":"2dd7e780cb1ac6f87870aea6066fabffa694970c"}}},"pos":16,"scrolled":true,"start":1654971862977,"state":"done","type":"cell"}
{"end":1654971862785,"exec_count":2,"id":"07ad7c","input":"class AvoType(Enum):\n    ORGANIC = 'organic'\n    CONVENTIONAL = 'conventional'","kernel":"python3-ubuntu","no_halt":true,"pos":0.5,"start":1654971862780,"state":"done","type":"cell"}
{"id":0,"time":1654969384322,"type":"user"}
{"last_load":1654967775780,"type":"file"}