{"backend_state":"running","connection_file":"/projects/79f0d46f-11ed-4ebe-8d2f-dc96b3f45fdf/.local/share/jupyter/runtime/kernel-8c672a85-1b97-4d63-9d53-3a3e76862abd.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1655316999339,"exec_count":1,"id":"4ae687","input":"import pandas as pd\nimport plotly.express as px\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nimport city_to_state\nimport us_state_abbrev\nfrom enum import Enum","kernel":"python3-ubuntu","no_halt":true,"pos":0,"start":1655316998364,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999358,"exec_count":2,"id":"07ad7c","input":"class AvoType(Enum):\n    ORGANIC = 'organic'\n    CONVENTIONAL = 'conventional'","kernel":"python3-ubuntu","no_halt":true,"pos":1,"start":1655316999355,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999365,"exec_count":3,"id":"7c1120","input":"class MapType(Enum):\n    MONTHLY = 'year_n_month'\n    YEARLY = 'year'","kernel":"python3-ubuntu","no_halt":true,"pos":2,"start":1655316999360,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999374,"exec_count":4,"id":"379825","input":"city_to_state_dict = city_to_state.city_to_state_dict\nus_state_abbrev_dict = us_state_abbrev.us_state_to_abbrev_dict","kernel":"python3-ubuntu","no_halt":true,"pos":3,"start":1655316999368,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999398,"exec_count":5,"id":"c1c079","input":"regions = {\n    'West': ['Utah', 'New Mexico'],\n    'Plains': ['Oklahoma', 'Kansas', 'Nebraska', 'South Dakota', 'Wyoming', 'Montana', 'North Dakota'],\n    'Southeast': ['West Virginia', 'Virginia', 'Mississippi', 'Alabama'],\n    'Northeast': ['New Jersey', 'Rhode Island', 'Vermont', 'New Hampshire', 'Maine', 'Delaware'],\n    'Northern New England': ['New Jersey'],\n    'Great Lakes': ['Wisconsin', 'Iowa']\n}","kernel":"python3-ubuntu","no_halt":true,"pos":4,"start":1655316999387,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999414,"exec_count":6,"id":"51a33b","input":"df = pd.DataFrame()","kernel":"python3-ubuntu","no_halt":true,"pos":5,"start":1655316999403,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999435,"exec_count":7,"id":"b776f5","input":"def set_up():\n    avocado_df = pd.read_csv('avocados.csv')\n\n    avocado_df = pd.concat(\n        [avocado_df,\n         get_predicted_prices_from_all(avocado_df)],\n        join='inner')\n\n    # float year and month column (year.month)\n    avocado_df['year_n_month'] = avocado_df['date'].replace('-', '', regex=True)\n    avocado_df['year_n_month'] = pd.to_numeric(avocado_df['year_n_month'])\n    avocado_df['year_n_month'] = avocado_df['year_n_month'].apply(to_readable_date)\n\n    # state column from city\n    avocado_df['state'] = avocado_df['geography'].apply(to_state)\n    # get states not included from regions (plains, northern new england, great lakes)\n    avocado_df = pd.concat([avocado_df, get_all_non_included_states_from_regions(avocado_df)], ignore_index=True)\n    # code column from state names (for map visualization)\n    avocado_df['code'] = avocado_df['state'].apply(to_abbrev)\n\n    # print(avocado_df.loc[(avocado_df['state'] == 'NaC')].geography.unique())\n    # print(avocado_df.loc[(avocado_df['code'] == 'NaS')].geography.unique())\n\n    return avocado_df","kernel":"python3-ubuntu","no_halt":true,"pos":6,"start":1655316999428,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999496,"exec_count":12,"id":"a4e9b6","input":"def get_all_non_included_states_from_regions(avocado_df):\n    total_df = avocado_df[0:0]\n    for region in regions.keys():\n        curr_df = avocado_df.loc[(avocado_df['geography'] == region)]\n        for x in range(0, len(regions[region])):\n            temp = curr_df.assign(state=regions[region][x])\n            total_df = pd.concat([total_df, temp], ignore_index=True)\n    return total_df","kernel":"python3-ubuntu","no_halt":true,"pos":7,"start":1655316999489,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999510,"exec_count":13,"id":"476a96","input":"def show_map(map_type, avo_typ):\n    show_df = get_from_all(map_type, avo_typ)\n\n    color_scale = 'deep'\n    if avo_typ == AvoType.CONVENTIONAL:\n        color_scale = 'amp'\n\n    max_val = show_df.loc[(df['type'] == avo_typ.value), :]['average_price'].max()\n    min_val = show_df.loc[(df['type'] == avo_typ.value), :]['average_price'].min()\n\n    fig = px.choropleth(\n        show_df,\n        locations='code',\n        locationmode='USA-states',\n        hover_name='state',\n        color='average_price',\n        color_continuous_scale=color_scale,\n        range_color=(min_val, max_val),\n        animation_frame=map_type.value,\n        scope='usa',\n        title=f'Prices of {avo_typ.name} Avocados across the U.S. ({map_type.name})',\n        labels={'average_price': 'average price', 'year_n_month': 'date'}\n    )\n    fig.show()","kernel":"python3-ubuntu","no_halt":true,"pos":8,"start":1655316999500,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999532,"exec_count":14,"id":"eae9f3","input":"def get_from_all(map_typ, avo_typ):\n    chosen_df = df.copy()\n\n    from_all = chosen_df[0:0]\n    for x in range(0, len(chosen_df[map_typ.value].unique())):\n        from_all = (pd.concat(\n            [from_all,\n             get_from(map_typ, chosen_df[map_typ.value].unique()[x], avo_typ)],\n            ignore_index=True))\n    return from_all","kernel":"python3-ubuntu","no_halt":true,"pos":9,"start":1655316999515,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999545,"exec_count":15,"id":"54431d","input":"def get_from(map_typ, val, avo_typ):\n    vals_df = df.loc[((df[map_typ.value] == val) & (df['type'] == avo_typ.value))]\n    temp = vals_df.groupby(vals_df.state)['average_price'].mean()\n\n    res = pd.DataFrame(temp.index.values, columns=['state'])\n\n    res['code'] = res['state'].apply(to_abbrev)\n    res['average_price'] = temp.values\n    res[map_typ.value] = val\n    res = res.drop(res[res['state'] == 'NaC'].index)\n\n    return res","kernel":"python3-ubuntu","no_halt":true,"pos":10,"start":1655316999535,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999560,"exec_count":16,"id":"457b40","input":"def to_abbrev(state):\n    if state in us_state_abbrev_dict:\n        return us_state_abbrev_dict[state]\n    else:\n        return 'NaS'","kernel":"python3-ubuntu","no_halt":true,"pos":11,"start":1655316999551,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999570,"exec_count":17,"id":"6e2779","input":"def to_state(city):\n    if city in city_to_state_dict:\n        return city_to_state_dict[city]\n\n    city = city.split(\"/\")[0]\n    if city in city_to_state_dict:\n        return city_to_state_dict[city]\n    if city in us_state_abbrev_dict:\n        return city\n    elif city == 'Hartford':\n        return city_to_state_dict['West Hartford']\n    elif city == 'Roanoke':\n        return city_to_state_dict['Roanoke Rapids']\n    else:\n        return 'NaC'","kernel":"python3-ubuntu","no_halt":true,"pos":12,"start":1655316999567,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999692,"exec_count":22,"id":"e8afb0","input":"def to_readable_date(date):\n    date = date // 100\n    year = date // 100\n    month = date % 100\n    return year + (month / 100)","kernel":"python3-ubuntu","no_halt":true,"pos":13,"start":1655316999685,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316999729,"exec_count":23,"id":"555b0e","input":"def show_scatter():\n    us_df = df.loc[(df['geography'] == 'Total U.S.'), :].copy(deep=False)\n    us_df['date'] = pd.to_datetime(us_df['date'])\n    us_fig = px.scatter(\n        us_df,\n        x='date',\n        y='total_volume',\n        color='type',\n        size=us_df['average_price'].values,\n        title='Total Volume of Avocados Sold in the U.S.',\n        trendline=\"ols\",\n    )\n    us_fig.show()","kernel":"python3-ubuntu","no_halt":true,"pos":14,"start":1655316999702,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317255098,"exec_count":25,"id":"adb726","input":"main()","kernel":"python3-ubuntu","no_halt":true,"output":{"0":{"name":"stdout","text":"53\n"},"1":{"name":"stdout","text":"52\n"},"10":{"name":"stdout","text":"43\n"},"11":{"name":"stdout","text":"42\n"},"12":{"name":"stdout","text":"41\n"},"13":{"name":"stdout","text":"40\n"},"14":{"name":"stdout","text":"39\n"},"15":{"name":"stdout","text":"38\n"},"16":{"name":"stdout","text":"37\n"},"17":{"name":"stdout","text":"36\n"},"18":{"name":"stdout","text":"35\n"},"19":{"name":"stdout","text":"34\n"},"2":{"name":"stdout","text":"51\n"},"20":{"name":"stdout","text":"33\n"},"21":{"name":"stdout","text":"32\n"},"22":{"name":"stdout","text":"31\n"},"23":{"name":"stdout","text":"30\n"},"24":{"name":"stdout","text":"29\n"},"25":{"name":"stdout","text":"28\n"},"26":{"name":"stdout","text":"27\n"},"27":{"name":"stdout","text":"26\n"},"28":{"name":"stdout","text":"25\n"},"29":{"name":"stdout","text":"24\n"},"3":{"name":"stdout","text":"50\n"},"30":{"name":"stdout","text":"23\n"},"31":{"name":"stdout","text":"22\n"},"32":{"name":"stdout","text":"21\n"},"33":{"name":"stdout","text":"20\n"},"34":{"name":"stdout","text":"19\n"},"35":{"name":"stdout","text":"18\n"},"36":{"name":"stdout","text":"17\n"},"37":{"name":"stdout","text":"16\n"},"38":{"name":"stdout","text":"15\n"},"39":{"name":"stdout","text":"14\n"},"4":{"name":"stdout","text":"49\n"},"40":{"name":"stdout","text":"13\n"},"41":{"name":"stdout","text":"12\n"},"42":{"name":"stdout","text":"11\n"},"43":{"name":"stdout","text":"10\n"},"44":{"name":"stdout","text":"9\n"},"45":{"name":"stdout","text":"8\n"},"46":{"name":"stdout","text":"7\n"},"47":{"name":"stdout","text":"6\n"},"48":{"name":"stdout","text":"5\n"},"49":{"name":"stdout","text":"4\n"},"5":{"name":"stdout","text":"48\n"},"50":{"name":"stdout","text":"3\n"},"51":{"name":"stdout","text":"2\n"},"52":{"name":"stdout","text":"1\n"},"53":{"name":"stdout","text":"0\n"},"54":{"data":{"iframe":"b05792b0a2d7e3ece9939129edbaba1b6e8ad96b"}},"55":{"data":{"iframe":"5657a9cd8331a0163fc32a77ba4e72e1a89d333d"}},"56":{"data":{"iframe":"819a389625a6ee8e37a6dbff3d5e692458ac49f8"}},"57":{"data":{"iframe":"5387cfc278167415ebc54dccf9673a6b654b477f"}},"58":{"ename":"ValueError","evalue":"Value of 'y' is not the name of a column in 'data_frame'. Expected one of ['date', 'average_price', 'type', 'year', 'geography', 'year_n_month', 'state', 'code'] but received: total_volume","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-25-263240bbee7e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-24-3eaff233ddd1>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mshow_map\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMapType\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMONTHLY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAvoType\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCONVENTIONAL\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m     \u001b[0mshow_scatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-23-cf2dc4e72fa4>\u001b[0m in \u001b[0;36mshow_scatter\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0mus_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'geography'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'Total U.S.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdeep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mus_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mus_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     us_fig = px.scatter(\n\u001b[0m\u001b[1;32m      5\u001b[0m         \u001b[0mus_df\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/plotly/express/_chart_types.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(data_frame, x, y, color, symbol, size, hover_name, hover_data, custom_data, text, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, orientation, color_discrete_sequence, color_discrete_map, color_continuous_scale, range_color, color_continuous_midpoint, symbol_sequence, symbol_map, opacity, size_max, marginal_x, marginal_y, trendline, trendline_options, trendline_color_override, trendline_scope, log_x, log_y, range_x, range_y, render_mode, title, template, width, height)\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0mmark\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0mD\u001b[0m \u001b[0mspace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m     \"\"\"\n\u001b[0;32m---> 66\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mmake_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlocals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconstructor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mScatter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     67\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/plotly/express/_core.py\u001b[0m in \u001b[0;36mmake_figure\u001b[0;34m(args, constructor, trace_patch, layout_patch)\u001b[0m\n\u001b[1;32m   1946\u001b[0m     \u001b[0mapply_default_cascade\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1947\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1948\u001b[0;31m     \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuild_dataframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconstructor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1949\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mconstructor\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTreemap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSunburst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIcicle\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"path\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1950\u001b[0m         \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess_dataframe_hierarchy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/plotly/express/_core.py\u001b[0m in \u001b[0;36mbuild_dataframe\u001b[0;34m(args, constructor)\u001b[0m\n\u001b[1;32m   1403\u001b[0m     \u001b[0;31m# now that things have been prepped, we do the systematic rewriting of `args`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1404\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1405\u001b[0;31m     df_output, wide_id_vars = process_args_into_dataframe(\n\u001b[0m\u001b[1;32m   1406\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwide_mode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvar_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue_name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1407\u001b[0m     )\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/plotly/express/_core.py\u001b[0m in \u001b[0;36mprocess_args_into_dataframe\u001b[0;34m(args, wide_mode, var_name, value_name)\u001b[0m\n\u001b[1;32m   1205\u001b[0m                         \u001b[0;32mif\u001b[0m \u001b[0margument\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"index\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1206\u001b[0m                             \u001b[0merr_msg\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"\\n To use the index, pass it in directly as `df.index`.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1207\u001b[0;31m                         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr_msg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1208\u001b[0m                 \u001b[0;32melif\u001b[0m \u001b[0mlength\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_input\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0margument\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlength\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1209\u001b[0m                     raise ValueError(\n","\u001b[0;31mValueError\u001b[0m: Value of 'y' is not the name of a column in 'data_frame'. Expected one of ['date', 'average_price', 'type', 'year', 'geography', 'year_n_month', 'state', 'code'] but received: total_volume"]},"6":{"name":"stdout","text":"47\n"},"7":{"name":"stdout","text":"46\n"},"8":{"name":"stdout","text":"45\n"},"9":{"name":"stdout","text":"44\n"}},"pos":16,"scrolled":false,"start":1655316999757,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":24,"id":"ad8b24","input":"def main():\n    global df\n    df = set_up()\n\n    show_map(MapType.YEARLY, AvoType.ORGANIC)\n    show_map(MapType.YEARLY, AvoType.CONVENTIONAL)\n    show_map(MapType.MONTHLY, AvoType.ORGANIC)\n    show_map(MapType.MONTHLY, AvoType.CONVENTIONAL)\n\n    # show_scatter()","kernel":"python3-ubuntu","no_halt":true,"pos":15,"state":"done","type":"cell"}
{"end":1655316999446,"exec_count":8,"id":"ceb2cb","input":"def get_predicted_prices_from_all(avocado_df):\n    from_all_df = avocado_df[0:0]\n    count = (len(avocado_df['geography'].unique()))\n    for geography in avocado_df['geography'].unique():\n        temp = get_predicted_prices_from(avocado_df.loc[(avocado_df['geography'] == geography)].copy(deep=True))\n        temp['geography'] = geography\n        from_all_df = pd.concat(\n            [from_all_df,\n             temp],\n            join='inner')\n        count -= 1\n        print(count)\n    from_all_df['date'] = pd.to_datetime(from_all_df['date'])\n    from_all_df['date'] = from_all_df['date'].dt.date\n    from_all_df['date'] = from_all_df['date'].astype(str)\n    return from_all_df","kernel":"python3-ubuntu","no_halt":true,"pos":6.5,"start":1655316999438,"state":"done","type":"cell"}
{"end":1655316999458,"exec_count":9,"id":"3ec1ff","input":"def get_predicted_prices_from(region_df):\n    res_df = region_df[0:0]\n    organic_train_df = region_df.loc[(region_df['type'] == 'organic')]\n    conventional_train_df = region_df.loc[(region_df['type'] == 'conventional')]\n    organic_train_df = date_to_number_columns(organic_train_df.copy(deep=True))\n    conventional_train_df = date_to_number_columns(conventional_train_df.copy(deep=True))\n    organic_predict = predict(train(organic_train_df))\n    conventional_predict = predict(train(conventional_train_df))\n    organic_predict['type'] = 'organic'\n    conventional_predict['type'] = 'conventional'\n    res_df = pd.concat([res_df, organic_predict], join='inner')\n    res_df = pd.concat([res_df, conventional_predict], join='inner')\n    return res_df","kernel":"python3-ubuntu","no_halt":true,"pos":6.75,"start":1655316999449,"state":"done","type":"cell"}
{"end":1655316999469,"exec_count":10,"id":"00c585","input":"def train(train_df):\n    labels = train_df['average_price']\n\n    features = train_df.drop('average_price', axis=1)\n\n    train_features, test_features, train_labels, test_labels = train_test_split(\n        features, labels, test_size=0.2, random_state=42)\n\n    rf = RandomForestRegressor(n_estimators=1000, random_state=42)\n    rf.fit(train_features, train_labels)\n\n    return rf","kernel":"python3-ubuntu","no_halt":true,"pos":6.875,"start":1655316999463,"state":"done","type":"cell"}
{"end":1655316999579,"exec_count":18,"id":"7deeeb","input":"def date_to_year(date):\n    return date.year","kernel":"python3-ubuntu","no_halt":true,"pos":12.5,"start":1655316999574,"state":"done","type":"cell"}
{"end":1655316999585,"exec_count":19,"id":"ef6c3f","input":"def date_to_month(date):\n    return date.month","kernel":"python3-ubuntu","no_halt":true,"pos":12.75,"start":1655316999581,"state":"done","type":"cell"}
{"end":1655316999611,"exec_count":20,"id":"77a66b","input":"def date_to_day(date):\n    return date.day","kernel":"python3-ubuntu","no_halt":true,"pos":12.875,"start":1655316999587,"state":"done","type":"cell"}
{"end":1655316999675,"exec_count":21,"id":"5b55b1","input":"def date_to_number_columns(chosen_df):\n    chosen_df['date'] = pd.to_datetime(chosen_df['date'])\n    chosen_df['month'] = chosen_df['date'].apply(date_to_month)\n    chosen_df['day'] = chosen_df['date'].apply(date_to_day)\n    chosen_df = chosen_df[['average_price', 'year', 'month', 'day']]\n    return chosen_df","kernel":"python3-ubuntu","no_halt":true,"pos":12.9375,"start":1655316999619,"state":"done","type":"cell"}
{"exec_count":11,"id":"398c8f","input":"def predict(model):\n    predict_df = pd.DataFrame(pd.date_range(start='1-16-2021', end='1-16-2025', freq='8D'), columns=['date'])\n    predict_df['year'] = predict_df['date'].apply(date_to_year)\n    predict_df['month'] = predict_df['date'].apply(date_to_month)\n    predict_df['day'] = predict_df['date'].apply(date_to_day)\n    other = predict_df.drop('date', axis=1)\n    predict_df['average_price'] = model.predict(other)\n\n    return predict_df","kernel":"python3-ubuntu","no_halt":true,"pos":6.9375,"state":"done","type":"cell"}
{"id":0,"time":1655317132571,"type":"user"}
{"last_load":1655316530915,"type":"file"}