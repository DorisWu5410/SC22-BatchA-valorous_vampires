{"backend_state":"init","connection_file":"/projects/79f0d46f-11ed-4ebe-8d2f-dc96b3f45fdf/.local/share/jupyter/runtime/kernel-67dcc9ba-6669-40c4-aef2-734bf0e7caad.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"1097ff","input":"","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"d98816","input":"pip install xgboost","output":{"0":{"name":"stdout","output_type":"stream","text":"Requirement already satisfied: xgboost in /projects/79f0d46f-11ed-4ebe-8d2f-dc96b3f45fdf/.local/lib/python3.8/site-packages (1.6.1)\r\nRequirement already satisfied: scipy in /usr/local/lib/python3.8/dist-packages (from xgboost) (1.8.0)\r\nRequirement already satisfied: numpy in /usr/local/lib/python3.8/dist-packages (from xgboost) (1.22.3)\r\n"},"1":{"name":"stdout","output_type":"stream","text":"Note: you may need to restart the kernel to use updated packages.\n"}},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"b8c955","input":"ad.index = ad[\"Date\"]\nad.plot()","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f0363db7eb0>"},"exec_count":10,"output_type":"execute_result"},"1":{"data":{"image/png":"4cb3525e6220043efe7b58baeb745a833570682e","text/plain":"<Figure size 1440x720 with 1 Axes>"},"exec_count":10,"metadata":{"image/png":{"height":588,"width":1159},"needs_background":"light"},"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"7474c1","input":"np.random.seed(7)","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"dee725","input":"s = MinMaxScaler(feature_range=(0, 1))\nad.index = ad.Date\nad = ad.drop(\"Date\",axis=1)\nad.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 338 entries, 2015-12-27 to 2018-01-07\nData columns (total 1 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   AveragePrice  338 non-null    float64\ndtypes: float64(1)\nmemory usage: 5.3+ KB\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"d4de16","input":"dataset = ad[\"AveragePrice\"].values\ndataset = dataset.reshape(dataset.shape[0],1)\ndataset.shape","output":{"0":{"data":{"text/plain":"(338, 1)"},"exec_count":13,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"32d656","input":"dataset = s.fit_transform(dataset)","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"778f88","input":"train_size = int(len(dataset) * 0.80)\ntest_size = len(dataset) - train_size\ntrain, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]\ntrain.shape, test.shape","output":{"0":{"data":{"text/plain":"((270, 1), (68, 1))"},"exec_count":15,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"5152af","input":"def cd(dataset, look_back=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-look_back-1):\n        a = dataset[i:(i+look_back), 0]\n        dataX.append(a)\n        dataY.append(dataset[i + look_back, 0])\n    return np.array(dataX), np.array(dataY)","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"3afa50","input":"look_back = 25\ntrainX, trainY = cd(train, look_back)\ntestX, testY = cd(test, look_back)\ntrainX.shape,trainY.shape,testX.shape,testY.shape\n\n\ntrainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))\ntrainX.shape,testX.shape","output":{"0":{"data":{"text/plain":"((244, 1, 25), (42, 1, 25))"},"exec_count":17,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"aed9c5","input":"model = Sequential()\nmodel.add(LSTM(4, input_shape=(1, look_back)))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(trainX, trainY, epochs=100, batch_size=1, verbose=2)","output":{"0":{"name":"stdout","output_type":"stream","text":"Epoch 1/100\n"},"1":{"name":"stdout","output_type":"stream","text":"244/244 - 2s - loss: 0.1171 - 2s/epoch - 9ms/step\n"},"10":{"name":"stdout","output_type":"stream","text":"Epoch 6/100\n"},"100":{"name":"stdout","output_type":"stream","text":"Epoch 51/100\n"},"101":{"name":"stdout","output_type":"stream","text":"244/244 - 1s - loss: 0.0059 - 540ms/epoch - 2ms/step\n"},"102":{"name":"stdout","output_type":"stream","text":"Epoch 52/100\n"},"103":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0055 - 398ms/epoch - 2ms/step\n"},"104":{"name":"stdout","output_type":"stream","text":"Epoch 53/100\n"},"105":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0055 - 415ms/epoch - 2ms/step\n"},"106":{"name":"stdout","output_type":"stream","text":"Epoch 54/100\n"},"107":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0058 - 405ms/epoch - 2ms/step\n"},"108":{"name":"stdout","output_type":"stream","text":"Epoch 55/100\n"},"109":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0058 - 350ms/epoch - 1ms/step\n"},"11":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0091 - 352ms/epoch - 1ms/step\n"},"110":{"name":"stdout","output_type":"stream","text":"Epoch 56/100\n"},"111":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0056 - 387ms/epoch - 2ms/step\n"},"112":{"name":"stdout","output_type":"stream","text":"Epoch 57/100\n"},"113":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0058 - 451ms/epoch - 2ms/step\n"},"114":{"name":"stdout","output_type":"stream","text":"Epoch 58/100\n"},"115":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0054 - 408ms/epoch - 2ms/step\n"},"116":{"name":"stdout","output_type":"stream","text":"Epoch 59/100\n"},"117":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0059 - 368ms/epoch - 2ms/step\n"},"118":{"name":"stdout","output_type":"stream","text":"Epoch 60/100\n"},"119":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0056 - 397ms/epoch - 2ms/step\n"},"12":{"name":"stdout","output_type":"stream","text":"Epoch 7/100\n"},"120":{"name":"stdout","output_type":"stream","text":"Epoch 61/100\n"},"121":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0057 - 352ms/epoch - 1ms/step\n"},"122":{"name":"stdout","output_type":"stream","text":"Epoch 62/100\n"},"123":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0058 - 414ms/epoch - 2ms/step\n"},"124":{"name":"stdout","output_type":"stream","text":"Epoch 63/100\n"},"125":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0057 - 421ms/epoch - 2ms/step\n"},"126":{"name":"stdout","output_type":"stream","text":"Epoch 64/100\n"},"127":{"name":"stdout","output_type":"stream","text":"244/244 - 1s - loss: 0.0056 - 519ms/epoch - 2ms/step\n"},"128":{"name":"stdout","output_type":"stream","text":"Epoch 65/100\n"},"129":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0055 - 358ms/epoch - 1ms/step\n"},"13":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0084 - 383ms/epoch - 2ms/step\n"},"130":{"name":"stdout","output_type":"stream","text":"Epoch 66/100\n"},"131":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0056 - 380ms/epoch - 2ms/step\n"},"132":{"name":"stdout","output_type":"stream","text":"Epoch 67/100\n"},"133":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0056 - 400ms/epoch - 2ms/step\n"},"134":{"name":"stdout","output_type":"stream","text":"Epoch 68/100\n"},"135":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0056 - 380ms/epoch - 2ms/step\n"},"136":{"name":"stdout","output_type":"stream","text":"Epoch 69/100\n"},"137":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0056 - 427ms/epoch - 2ms/step\n"},"138":{"name":"stdout","output_type":"stream","text":"Epoch 70/100\n"},"139":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0054 - 335ms/epoch - 1ms/step\n"},"14":{"name":"stdout","output_type":"stream","text":"Epoch 8/100\n"},"140":{"name":"stdout","output_type":"stream","text":"Epoch 71/100\n"},"141":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0053 - 396ms/epoch - 2ms/step\n"},"142":{"name":"stdout","output_type":"stream","text":"Epoch 72/100\n"},"143":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0053 - 337ms/epoch - 1ms/step\n"},"144":{"name":"stdout","output_type":"stream","text":"Epoch 73/100\n"},"145":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0057 - 370ms/epoch - 2ms/step\n"},"146":{"name":"stdout","output_type":"stream","text":"Epoch 74/100\n"},"147":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0058 - 378ms/epoch - 2ms/step\n"},"148":{"name":"stdout","output_type":"stream","text":"Epoch 75/100\n"},"149":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0055 - 380ms/epoch - 2ms/step\n"},"15":{"name":"stdout","output_type":"stream","text":"244/244 - 1s - loss: 0.0084 - 566ms/epoch - 2ms/step\n"},"150":{"name":"stdout","output_type":"stream","text":"Epoch 76/100\n"},"151":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0055 - 466ms/epoch - 2ms/step\n"},"152":{"name":"stdout","output_type":"stream","text":"Epoch 77/100\n"},"153":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0053 - 399ms/epoch - 2ms/step\n"},"154":{"name":"stdout","output_type":"stream","text":"Epoch 78/100\n"},"155":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0056 - 444ms/epoch - 2ms/step\n"},"156":{"name":"stdout","output_type":"stream","text":"Epoch 79/100\n"},"157":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0055 - 419ms/epoch - 2ms/step\n"},"158":{"name":"stdout","output_type":"stream","text":"Epoch 80/100\n"},"159":{"name":"stdout","output_type":"stream","text":"244/244 - 1s - loss: 0.0056 - 531ms/epoch - 2ms/step\n"},"16":{"name":"stdout","output_type":"stream","text":"Epoch 9/100\n"},"160":{"name":"stdout","output_type":"stream","text":"Epoch 81/100\n"},"161":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0054 - 476ms/epoch - 2ms/step\n"},"162":{"name":"stdout","output_type":"stream","text":"Epoch 82/100\n"},"163":{"name":"stdout","output_type":"stream","text":"244/244 - 1s - loss: 0.0055 - 556ms/epoch - 2ms/step\n"},"164":{"name":"stdout","output_type":"stream","text":"Epoch 83/100\n"},"165":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0054 - 483ms/epoch - 2ms/step\n"},"166":{"name":"stdout","output_type":"stream","text":"Epoch 84/100\n"},"167":{"name":"stdout","output_type":"stream","text":"244/244 - 1s - loss: 0.0054 - 529ms/epoch - 2ms/step\n"},"168":{"name":"stdout","output_type":"stream","text":"Epoch 85/100\n"},"169":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0054 - 485ms/epoch - 2ms/step\n"},"17":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0079 - 379ms/epoch - 2ms/step\n"},"170":{"name":"stdout","output_type":"stream","text":"Epoch 86/100\n"},"171":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0055 - 390ms/epoch - 2ms/step\n"},"172":{"name":"stdout","output_type":"stream","text":"Epoch 87/100\n"},"173":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0055 - 388ms/epoch - 2ms/step\n"},"174":{"name":"stdout","output_type":"stream","text":"Epoch 88/100\n"},"175":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0056 - 438ms/epoch - 2ms/step\n"},"176":{"name":"stdout","output_type":"stream","text":"Epoch 89/100\n"},"177":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0053 - 392ms/epoch - 2ms/step\n"},"178":{"name":"stdout","output_type":"stream","text":"Epoch 90/100\n"},"179":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0054 - 381ms/epoch - 2ms/step\n"},"18":{"name":"stdout","output_type":"stream","text":"Epoch 10/100\n"},"180":{"name":"stdout","output_type":"stream","text":"Epoch 91/100\n"},"181":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0052 - 427ms/epoch - 2ms/step\n"},"182":{"name":"stdout","output_type":"stream","text":"Epoch 92/100\n"},"183":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0055 - 498ms/epoch - 2ms/step\n"},"184":{"name":"stdout","output_type":"stream","text":"Epoch 93/100\n"},"185":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0052 - 421ms/epoch - 2ms/step\n"},"186":{"name":"stdout","output_type":"stream","text":"Epoch 94/100\n"},"187":{"name":"stdout","output_type":"stream","text":"244/244 - 1s - loss: 0.0053 - 531ms/epoch - 2ms/step\n"},"188":{"name":"stdout","output_type":"stream","text":"Epoch 95/100\n"},"189":{"name":"stdout","output_type":"stream","text":"244/244 - 1s - loss: 0.0054 - 724ms/epoch - 3ms/step\n"},"19":{"name":"stdout","output_type":"stream","text":"244/244 - 1s - loss: 0.0076 - 545ms/epoch - 2ms/step\n"},"190":{"name":"stdout","output_type":"stream","text":"Epoch 96/100\n"},"191":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0053 - 453ms/epoch - 2ms/step\n"},"192":{"name":"stdout","output_type":"stream","text":"Epoch 97/100\n"},"193":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0054 - 491ms/epoch - 2ms/step\n"},"194":{"name":"stdout","output_type":"stream","text":"Epoch 98/100\n"},"195":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0054 - 413ms/epoch - 2ms/step\n"},"196":{"name":"stdout","output_type":"stream","text":"Epoch 99/100\n"},"197":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0054 - 471ms/epoch - 2ms/step\n"},"198":{"name":"stdout","output_type":"stream","text":"Epoch 100/100\n"},"199":{"name":"stdout","output_type":"stream","text":"244/244 - 1s - loss: 0.0054 - 576ms/epoch - 2ms/step\n"},"2":{"name":"stdout","output_type":"stream","text":"Epoch 2/100\n"},"20":{"name":"stdout","output_type":"stream","text":"Epoch 11/100\n"},"200":{"data":{"text/plain":"<keras.callbacks.History at 0x7f0363253430>"},"exec_count":18,"output_type":"execute_result"},"21":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0075 - 352ms/epoch - 1ms/step\n"},"22":{"name":"stdout","output_type":"stream","text":"Epoch 12/100\n"},"23":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0075 - 336ms/epoch - 1ms/step\n"},"24":{"name":"stdout","output_type":"stream","text":"Epoch 13/100\n"},"25":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0071 - 390ms/epoch - 2ms/step\n"},"26":{"name":"stdout","output_type":"stream","text":"Epoch 14/100\n"},"27":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0070 - 371ms/epoch - 2ms/step\n"},"28":{"name":"stdout","output_type":"stream","text":"Epoch 15/100\n"},"29":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0069 - 355ms/epoch - 1ms/step\n"},"3":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0157 - 405ms/epoch - 2ms/step\n"},"30":{"name":"stdout","output_type":"stream","text":"Epoch 16/100\n"},"31":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0068 - 351ms/epoch - 1ms/step\n"},"32":{"name":"stdout","output_type":"stream","text":"Epoch 17/100\n"},"33":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0067 - 342ms/epoch - 1ms/step\n"},"34":{"name":"stdout","output_type":"stream","text":"Epoch 18/100\n"},"35":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0066 - 425ms/epoch - 2ms/step\n"},"36":{"name":"stdout","output_type":"stream","text":"Epoch 19/100\n"},"37":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0065 - 363ms/epoch - 1ms/step\n"},"38":{"name":"stdout","output_type":"stream","text":"Epoch 20/100\n"},"39":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0066 - 382ms/epoch - 2ms/step\n"},"4":{"name":"stdout","output_type":"stream","text":"Epoch 3/100\n"},"40":{"name":"stdout","output_type":"stream","text":"Epoch 21/100\n"},"41":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0063 - 348ms/epoch - 1ms/step\n"},"42":{"name":"stdout","output_type":"stream","text":"Epoch 22/100\n"},"43":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0066 - 342ms/epoch - 1ms/step\n"},"44":{"name":"stdout","output_type":"stream","text":"Epoch 23/100\n"},"45":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0064 - 440ms/epoch - 2ms/step\n"},"46":{"name":"stdout","output_type":"stream","text":"Epoch 24/100\n"},"47":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0063 - 351ms/epoch - 1ms/step\n"},"48":{"name":"stdout","output_type":"stream","text":"Epoch 25/100\n"},"49":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0061 - 322ms/epoch - 1ms/step\n"},"5":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0130 - 483ms/epoch - 2ms/step\n"},"50":{"name":"stdout","output_type":"stream","text":"Epoch 26/100\n"},"51":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0065 - 358ms/epoch - 1ms/step\n"},"52":{"name":"stdout","output_type":"stream","text":"Epoch 27/100\n"},"53":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0064 - 491ms/epoch - 2ms/step\n"},"54":{"name":"stdout","output_type":"stream","text":"Epoch 28/100\n"},"55":{"name":"stdout","output_type":"stream","text":"244/244 - 1s - loss: 0.0065 - 572ms/epoch - 2ms/step\n"},"56":{"name":"stdout","output_type":"stream","text":"Epoch 29/100\n"},"57":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0063 - 329ms/epoch - 1ms/step\n"},"58":{"name":"stdout","output_type":"stream","text":"Epoch 30/100\n"},"59":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0061 - 357ms/epoch - 1ms/step\n"},"6":{"name":"stdout","output_type":"stream","text":"Epoch 4/100\n"},"60":{"name":"stdout","output_type":"stream","text":"Epoch 31/100\n"},"61":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0060 - 358ms/epoch - 1ms/step\n"},"62":{"name":"stdout","output_type":"stream","text":"Epoch 32/100\n"},"63":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0060 - 351ms/epoch - 1ms/step\n"},"64":{"name":"stdout","output_type":"stream","text":"Epoch 33/100\n"},"65":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0060 - 369ms/epoch - 2ms/step\n"},"66":{"name":"stdout","output_type":"stream","text":"Epoch 34/100\n"},"67":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0062 - 369ms/epoch - 2ms/step\n"},"68":{"name":"stdout","output_type":"stream","text":"Epoch 35/100\n"},"69":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0059 - 388ms/epoch - 2ms/step\n"},"7":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0109 - 396ms/epoch - 2ms/step\n"},"70":{"name":"stdout","output_type":"stream","text":"Epoch 36/100\n"},"71":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0060 - 351ms/epoch - 1ms/step\n"},"72":{"name":"stdout","output_type":"stream","text":"Epoch 37/100\n"},"73":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0060 - 406ms/epoch - 2ms/step\n"},"74":{"name":"stdout","output_type":"stream","text":"Epoch 38/100\n"},"75":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0056 - 354ms/epoch - 1ms/step\n"},"76":{"name":"stdout","output_type":"stream","text":"Epoch 39/100\n"},"77":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0060 - 415ms/epoch - 2ms/step\n"},"78":{"name":"stdout","output_type":"stream","text":"Epoch 40/100\n"},"79":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0061 - 391ms/epoch - 2ms/step\n"},"8":{"name":"stdout","output_type":"stream","text":"Epoch 5/100\n"},"80":{"name":"stdout","output_type":"stream","text":"Epoch 41/100\n"},"81":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0058 - 348ms/epoch - 1ms/step\n"},"82":{"name":"stdout","output_type":"stream","text":"Epoch 42/100\n"},"83":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0056 - 385ms/epoch - 2ms/step\n"},"84":{"name":"stdout","output_type":"stream","text":"Epoch 43/100\n"},"85":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0059 - 344ms/epoch - 1ms/step\n"},"86":{"name":"stdout","output_type":"stream","text":"Epoch 44/100\n"},"87":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0060 - 361ms/epoch - 1ms/step\n"},"88":{"name":"stdout","output_type":"stream","text":"Epoch 45/100\n"},"89":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0060 - 377ms/epoch - 2ms/step\n"},"9":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0100 - 362ms/epoch - 1ms/step\n"},"90":{"name":"stdout","output_type":"stream","text":"Epoch 46/100\n"},"91":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0058 - 354ms/epoch - 1ms/step\n"},"92":{"name":"stdout","output_type":"stream","text":"Epoch 47/100\n"},"93":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0060 - 385ms/epoch - 2ms/step\n"},"94":{"name":"stdout","output_type":"stream","text":"Epoch 48/100\n"},"95":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0058 - 355ms/epoch - 1ms/step\n"},"96":{"name":"stdout","output_type":"stream","text":"Epoch 49/100\n"},"97":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0058 - 370ms/epoch - 2ms/step\n"},"98":{"name":"stdout","output_type":"stream","text":"Epoch 50/100\n"},"99":{"name":"stdout","output_type":"stream","text":"244/244 - 0s - loss: 0.0056 - 399ms/epoch - 2ms/step\n"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"6f0778","input":"trainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)\ntrainPredict = s.inverse_transform(trainPredict)\ntrainY = s.inverse_transform([trainY])\ntestPredict = s.inverse_transform(testPredict)\ntestY = s.inverse_transform([testY])\ntrainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))","output":{"0":{"name":"stdout","output_type":"stream","text":"\r1/8 [==>...........................] - ETA: 5s"},"1":{"name":"stdout","output_type":"stream","text":"\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r8/8 [==============================] - 1s 5ms/step\n"},"2":{"name":"stdout","output_type":"stream","text":"\r1/2 [==============>...............] - ETA: 0s"},"3":{"name":"stdout","output_type":"stream","text":"\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r2/2 [==============================] - 0s 7ms/step\n"},"4":{"name":"stdout","output_type":"stream","text":"Train Score: 0.13 RMSE\nTest Score: 0.25 RMSE\n"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"86b801","input":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize']=20,10\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nimport math\n\navo = pd.read_csv(\"./DS-Notebooks-Summer-2022/week1/Data/avocado.csv\")","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"094c8b","input":"trainPredictPlot = np.empty_like(dataset)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\ntestPredictPlot = np.empty_like(dataset)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict\nplt.plot(s.inverse_transform(dataset))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","output":{"0":{"data":{"image/png":"8a15ffd9c62125cf9e6887f61760b503084e5b9f","text/plain":"<Figure size 1440x720 with 1 Axes>"},"exec_count":21,"metadata":{"image/png":{"height":574,"width":1159},"needs_background":"light"},"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"8ebb0b","input":"print(avo.keys())","output":{"0":{"name":"stdout","output_type":"stream","text":"Index(['Unnamed: 0', 'Date', 'AveragePrice', 'Total Volume', '4046', '4225',\n       '4770', 'Total Bags', 'Small Bags', 'Large Bags', 'XLarge Bags', 'type',\n       'year', 'region'],\n      dtype='object')\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"eaf1f7","input":"avo = avo[[\"Date\", \"AveragePrice\", \"region\"]]","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"a24bf1","input":"avo.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>AveragePrice</th>\n      <th>region</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2015-12-27</td>\n      <td>1.33</td>\n      <td>Albany</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2015-12-20</td>\n      <td>1.35</td>\n      <td>Albany</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2015-12-13</td>\n      <td>0.93</td>\n      <td>Albany</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2015-12-06</td>\n      <td>1.08</td>\n      <td>Albany</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2015-11-29</td>\n      <td>1.28</td>\n      <td>Albany</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         Date  AveragePrice  region\n0  2015-12-27          1.33  Albany\n1  2015-12-20          1.35  Albany\n2  2015-12-13          0.93  Albany\n3  2015-12-06          1.08  Albany\n4  2015-11-29          1.28  Albany"},"exec_count":5,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"67f90d","input":"avo.plot()","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f0363e02520>"},"exec_count":6,"output_type":"execute_result"},"1":{"data":{"image/png":"585202afeb5bbdcdb9ed55c11d4c2bb5c750ee63","text/plain":"<Figure size 1440x720 with 1 Axes>"},"exec_count":6,"metadata":{"image/png":{"height":574,"width":1153},"needs_background":"light"},"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"044c12","input":"nyavo = avo[avo[\"region\"]== \"NewYork\"]\nnyavo.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>AveragePrice</th>\n      <th>region</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1456</th>\n      <td>2015-12-27</td>\n      <td>1.17</td>\n      <td>NewYork</td>\n    </tr>\n    <tr>\n      <th>1457</th>\n      <td>2015-12-20</td>\n      <td>1.23</td>\n      <td>NewYork</td>\n    </tr>\n    <tr>\n      <th>1458</th>\n      <td>2015-12-13</td>\n      <td>1.12</td>\n      <td>NewYork</td>\n    </tr>\n    <tr>\n      <th>1459</th>\n      <td>2015-12-06</td>\n      <td>1.20</td>\n      <td>NewYork</td>\n    </tr>\n    <tr>\n      <th>1460</th>\n      <td>2015-11-29</td>\n      <td>1.16</td>\n      <td>NewYork</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"            Date  AveragePrice   region\n1456  2015-12-27          1.17  NewYork\n1457  2015-12-20          1.23  NewYork\n1458  2015-12-13          1.12  NewYork\n1459  2015-12-06          1.20  NewYork\n1460  2015-11-29          1.16  NewYork"},"exec_count":7,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"48f8dd","input":"ad = nyavo[[\"Date\", \"AveragePrice\"]]","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"f0f76b","input":"ad.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>AveragePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1456</th>\n      <td>2015-12-27</td>\n      <td>1.17</td>\n    </tr>\n    <tr>\n      <th>1457</th>\n      <td>2015-12-20</td>\n      <td>1.23</td>\n    </tr>\n    <tr>\n      <th>1458</th>\n      <td>2015-12-13</td>\n      <td>1.12</td>\n    </tr>\n    <tr>\n      <th>1459</th>\n      <td>2015-12-06</td>\n      <td>1.20</td>\n    </tr>\n    <tr>\n      <th>1460</th>\n      <td>2015-11-29</td>\n      <td>1.16</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"            Date  AveragePrice\n1456  2015-12-27          1.17\n1457  2015-12-20          1.23\n1458  2015-12-13          1.12\n1459  2015-12-06          1.20\n1460  2015-11-29          1.16"},"exec_count":9,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"id":0,"time":1655328689932,"type":"user"}
{"last_load":1655316630549,"type":"file"}