{"backend_state":"running","connection_file":"/projects/79f0d46f-11ed-4ebe-8d2f-dc96b3f45fdf/.local/share/jupyter/runtime/kernel-5dc8ea00-e786-4bc9-aa8e-86ccce380815.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1655316632180,"exec_count":2,"id":"9280da","input":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","kernel":"python3-ubuntu","pos":1,"start":1655316631366,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316635009,"exec_count":4,"id":"e3fb4d","input":"avocadoes.dropna(inplace = True) #drops rows with n/a\navocadoes.drop_duplicates(inplace = True) #drops rows with duplicates\navocadoes = avocadoes.reset_index(drop = True) #resets indexes, makes all minor titles titles again\n\nlength = len(avocadoes.index) # length of entire array\nlength","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"18249"},"exec_count":4}},"pos":3,"start":1655316634952,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316637025,"exec_count":5,"id":"eb4b56","input":"print(avocadoes.index)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"RangeIndex(start=0, stop=18249, step=1)\n"}},"pos":4,"start":1655316637023,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316639872,"exec_count":6,"id":"9326ff","input":"sns.heatmap(avocadoes.corr())","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f82aabe6d30>"},"exec_count":6},"1":{"data":{"image/png":"01366ba44c83d0f01b0234c8e270d529b194c976","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":472,"width":707},"needs_background":"light"}}},"pos":5,"start":1655316639352,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316643643,"exec_count":7,"id":"ee5b5d","input":"#Imma do relationship between number of smol bags and total volume of avocadoes\nx = avocadoes[\"Small Bags\"].to_numpy()\ny = avocadoes[\"Total Volume\"].to_numpy()","kernel":"python3-ubuntu","pos":6,"start":1655316643638,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316645604,"exec_count":8,"id":"595db3","input":"if x.shape[0] != y.shape[0]: #checks to see if same size\n    print(\"Haha loser\")\nelse:\n    print(\"You not a loser, not missing any data\")","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"You not a loser, not missing any data\n"}},"pos":7,"start":1655316645593,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316647684,"exec_count":9,"id":"94662a","input":"mix = np.arange(length) #arange first generates a sequence in acending order up to that number, then makes even spaces between values in that sequence, length is list of all the numbers (their order)\nnp.random.shuffle(mix)\n\nprint(mix)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"[13952  5956 17160 ...  9997  4074 16361]\n"}},"pos":9,"start":1655316647672,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316667374,"exec_count":11,"id":"0f3782","input":"split_data = int(length*0.8)\ntrain = mix[:split_data]\ntest = mix[split_data:]\n#learn","kernel":"python3-ubuntu","pos":10,"start":1655316667371,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316669493,"exec_count":12,"id":"6ebe3b","input":"x_train, y_train = x[train], y[train] #x[train] basically takes all the values of x that have an index of train, so if train = 4216, x[4216] is in x\nx_test, y_test = x[test], y[test]\nx_train = x_train.reshape(-1,1) #rows, then columns\ny_train = y_train.reshape(-1,1)\nx_test = x_test.reshape(-1,1)\ny_test = y_test.reshape(-1,1)","kernel":"python3-ubuntu","pos":11,"start":1655316669491,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316678321,"exec_count":14,"id":"e569f1","input":"from sklearn.linear_model import LinearRegression\nlinear = LinearRegression() #calls linear regression function\nlinear.fit(x_train, y_train)\nprint(linear.intercept_, linear.coef_[0])","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"[30431.97326118] [4.50426691]\n"}},"pos":13,"start":1655316678144,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316681017,"exec_count":15,"id":"701ea0","input":"y_predict = linear.predict(x_test)\n\n\nplt.figure(figsize = (10,5))\nplt.plot(x_test, y_predict ,'-') #last parameter determines line type, - is solid, -- is dashed, -o is doted\n\n#plt.subplot(1,1,1) #change size of plot\nplt.scatter(x_test, y_test, c = \"Red\")\nplt.title(\"Number of Small Bags vs. Total Volume of Avocadoes\", fontsize = \"18\")\nplt.xlabel(\"Number of Small bags\",fontsize = \"15\")\nplt.ylabel(\"Total Avocado Volume\", fontsize = \"15\")\nplt.grid(\"on\")\nplt.show\n","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(*args, **kw)>"},"exec_count":15},"1":{"data":{"image/png":"c6877ce808580a5f75460a4dfe7f4870acc47e31","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":340,"width":606},"needs_background":"light"}}},"pos":14,"start":1655316680585,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316692925,"exec_count":16,"id":"139c7f","input":"MAE = np.mean(abs(y_test - y_predict))\nprint(MAE)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"253912.30951780287\n"}},"pos":16,"start":1655316692921,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316695306,"exec_count":17,"id":"50f2a1","input":"#Imma choose AveragePrice v Total volume\na = avocadoes[\"AveragePrice\"].to_numpy()\nb = avocadoes[\"Total Volume\"].to_numpy()","kernel":"python3-ubuntu","pos":17,"start":1655316695303,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316698045,"exec_count":18,"id":"d3693f","input":"if a.shape[0] != b.shape[0]:\n    print(\"Missing some data\")\nelse:\n    print(\"NVM\")","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"NVM\n"}},"pos":18,"start":1655316698033,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316701423,"exec_count":19,"id":"f2be5e","input":"a_train, b_train = a[train], b[train]\na_test, b_test = a[test], b[test]\na_train = a_train.reshape(-1,1)\nb_train = b_train.reshape(-1,1)\na_test = a_test.reshape(-1,1)\nb_test = b_test.reshape(-1,1)","kernel":"python3-ubuntu","pos":19,"start":1655316701416,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316704380,"exec_count":20,"id":"d2b3b3","input":"plt.figure(figsize = (10,5))\n\nplt.subplot(1,1,1)\nplt.scatter(a_train,b_train,c = \"Blue\")\nplt.title(\"Average Price vs. Total Volume of Avocadoes (Training)\",fontsize = \"15\")\nplt.xlabel(\"Average Price\")\nplt.ylabel(\"Total Volume\")\nplt.grid(\"on\")\n\nplt.figure(figsize = (10,5))\n\nplt.subplot(1,1,1)\nplt.scatter(a_test, b_test,c = \"Brown\")\nplt.title(\"Average Price vs. Total Volume of Avocadoes (Testing)\", fontsize = \"15\")\nplt.xlabel(\"Average Price\")\nplt.ylabel(\"Total Volume\")\nplt.grid(\"on\")","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"06c61b41528ebac7e0ff525ba18e3dd2696e5ea5","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":333,"width":599},"needs_background":"light"}},"1":{"data":{"image/png":"1a6759416eba884aff0b742233b9301d11c6de5c","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":333,"width":599},"needs_background":"light"}}},"pos":20,"start":1655316703451,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316708683,"exec_count":21,"id":"7f76ed","input":"from sklearn.linear_model import LinearRegression\nAI = LinearRegression()\nAI.fit(a_train,b_train)\nprint(AI.intercept_,AI.coef_[0])","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"[3208275.3307208] [-1674866.82709093]\n"}},"pos":21,"start":1655316708680,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316711310,"exec_count":22,"id":"9576b4","input":"a_predict = AI.predict(a_test)","kernel":"python3-ubuntu","pos":22,"start":1655316711295,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316714376,"exec_count":23,"id":"a917e7","input":"plt.figure(figsize = (10,5))\nplt.plot(a_test, a_predict, \"-\" )\n\nplt.scatter(a_test, b_test, c = \"Yellow\")\nplt.title(\"Average Price vs. Total Volume of Avocadoes (Testing)\", fontsize = \"15\")\nplt.xlabel(\"Average Price\")\nplt.ylabel(\"Total Volume\")\nplt.grid(\"on\")","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"b9fc87639cfb898fc572265509988cd754f800c9","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":333,"width":599},"needs_background":"light"}}},"pos":23,"start":1655316713877,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316735019,"exec_count":24,"id":"f177a8","input":"from sklearn.linear_model import Lasso\n\nreg = Lasso(alpha=1)\nreg.fit(a_train, b_train)\nLasso(alpha=1)\n\n#print('R squared training set', round(reg.score(a_train, b_train)*100, 2))\n#print('R squared test set', round(reg.score(a_test, b_test)*100, 2))","kernel":"python3-ubuntu","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Lasso(alpha=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso(alpha=1)</pre></div></div></div></div></div>","text/plain":"Lasso(alpha=1)"},"exec_count":24}},"pos":26,"start":1655316735000,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316736806,"exec_count":25,"id":"a6e612","input":"from sklearn.metrics import mean_squared_error\n\n# Training data\npred_train = reg.predict(a_train)\nmse_train = mean_squared_error(a_train, b_train)\nprint('MSE training set', round(mse_train, 2))\n\n# Test data\npred = reg.predict(a_test)\nmse_test =mean_squared_error(b_test, pred)\nprint('MSE test set', round(mse_test, 2))","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"MSE training set 12758250890544.8\nMSE test set 11089724215609.44\n"}},"pos":27,"start":1655316736802,"state":"done","type":"cell"}
{"cell_type":"code","end":1655316798068,"exec_count":28,"id":"625587","input":"plt.figure(figsize = (10,5))\nalphas = np.linspace(0.01,500,100)\nlasso = Lasso(max_iter=10000)\ncoefs = []\n\nfor a in alphas:\n    lasso.set_params(alpha=a)\n    lasso.fit(a_train, b_train)\n    coefs.append(lasso.coef_)\n\nax = plt.gca()\n\nax.plot(alphas, coefs)\nplt.xlim(0, 10000)\nplt.ylim(0, 100000)\nax.set_xscale('log')\nplt.axis('tight')\nplt.xlabel('alpha')\nplt.ylabel('Standardized Coefficients')\nplt.title('Lasso coefficients as a function of alpha');\n\n\nplt.scatter(a_test, b_test, c = \"Yellow\")\nplt.title(\"Average Price vs. Total Volume of Avocadoes (Testing)\", fontsize = \"15\")\nplt.xlabel(\"Average Price\")\nplt.ylabel(\"Total Volume\")\nplt.grid(\"on\")\n","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"5009807cd4ef7057fb905584a82e50a2f2f12562","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":335,"width":645},"needs_background":"light"}}},"pos":28,"start":1655316796605,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317282739,"exec_count":40,"id":"0d622a","input":"avocadoes = pd.read_csv(\"./avocado_data/avocado.csv\")\navocadoes.head()\n#avocadoes.info\navocadoes.max()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"Unnamed: 0                    52\nDate                  2018-03-25\nAveragePrice                3.25\nTotal Volume         62505646.52\n4046                 22743616.17\n4225                 20470572.61\n4770                  2546439.11\nTotal Bags           19373134.37\nSmall Bags            13384586.8\nLarge Bags            5719096.61\nXLarge Bags            551693.65\ntype                     organic\nyear                        2018\nregion          WestTexNewMexico\ndtype: object"},"exec_count":40}},"pos":2,"start":1655317282671,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317492219,"exec_count":43,"id":"e299ef","input":"plt.figure(figsize = (10,5))\n\nplt.subplot(1,1,1) #change size of plot\nplt.scatter(x_train, y_train, c = \"Green\")\n#plt.xlim(-1, 10000)\n#plt.ylim(-1, 100000)\nplt.title(\"Number of Small Bags vs. Total Volume of Avocadoes\", fontsize = \"18\")\nplt.xlabel(\"Number of Small bags\",fontsize = \"15\")\nplt.ylabel(\"Total Avocado Volume\", fontsize = \"15\")\nplt.grid(\"on\")\nplt.show\n\nplt.figure(figsize = (10,5))\n\nplt.subplot(1,1,1) #change size of plot\n\nplt.scatter(x_test, y_test, c = \"Purple\")\nplt.title(\"Number of Small Bags vs. Total Volume of Avocadoes\", fontsize = \"18\")\nplt.xlabel(\"Number of Small bags\",fontsize = \"15\")\nplt.ylabel(\"Total Avocado Volume\", fontsize = \"15\")\nplt.grid(\"on\")\nplt.show\n\n","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(*args, **kw)>"},"exec_count":43},"1":{"data":{"image/png":"058057f6cddc1bb739993bf50cd4af9caede8dcc","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":340,"width":604},"needs_background":"light"}},"2":{"data":{"image/png":"a28af6adf420bedc40e607b814613fff1255ead7","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":340,"width":610},"needs_background":"light"}}},"pos":12,"start":1655317491325,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"24623c","input":"","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4c1048","input":"","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9fb2f2","input":"\n","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c82c09","input":"","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"db4d85","input":"","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":67,"id":"5fe716","input":"print(linear.score(x_test,y_test))","output":{"0":{"name":"stdout","output_type":"stream","text":"0.9299214399040856\n"}},"pos":15,"type":"cell"}
{"id":0,"time":1655324958646,"type":"user"}
{"last_load":1655316504311,"type":"file"}